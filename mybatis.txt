1、关于mybatis中on duplicate key update id = id这种方式返回值与在mysql客户端中直接执行结果不同，
可以通过在driverClass中设置以下两个参数：  [compensateOnDuplicateKeyUpdateCounts=false&useAffectedRows=true]

    【针对OnDuplicateKey】
    1. compensateOnDuplicateKeyUpdateCounts：表示对于on duplicate update返回的结果（0或者2）是否将它转成1，默认是false

    【对所有update有效】
    2. useAffectedRows：表示从mysql取回的行数是matched还是affected rows，默认是false，即取回的是matched，这种情况下，update新值的时候，返回2，update id = id这种情况返回1；
                    如果设置成true，update新值返回2，update id = id返回0，即表示的affected rows

2、MyBatis三种批量更新方式
    Summary：The first way is to modify the connection URL of Mysql to support multi-sql execution globally, which is not safe.
    Second, when the amount of data is large, the efficiency decreases obviously.
    Way three requires self-control and self-treatment, some hidden problems can not be found.
    1.1、
       <update id="updateBatch"  parameterType="java.util.List">  
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update tableName
            <set>
                name=${item.name},
                name2=${item.name2}
            </set>
            where id = ${item.id}
        </foreach>      
      </update>
      for this method, you need to add '&allowMultiQueries=true' to the URL that connects Mysql
    1.2、
      <update id="updateBatch" parameterType="java.util.List">
            update tableName
            <trim prefix="set" suffixOverrides=",">
                <trim prefix="c_name =case" suffix="end,">
                    <foreach collection="list" item="cus">
                        <if test="cus.name!=null">
                            when id=#{cus.id} then #{cus.name}
                        </if>
                    </foreach>
                </trim>
                <trim prefix="c_age =case" suffix="end,">
                    <foreach collection="list" item="cus">
                        <if test="cus.age!=null">
                            when id=#{cus.id} then #{cus.age}
                        </if>
                    </foreach>
                </trim>
            </trim>
            <where>
                <foreach collection="list" separator="or" item="cus">
                    id = #{cus.id}
                </foreach>
            </where>
      </update>
    1.3、
      public int updateBatch(List<Object> list){
            if(list ==null || list.size() <= 0){
                return -1;
            }
            SqlSessionFactory sqlSessionFactory = SpringContextUtil.getBean("sqlSessionFactory");
            SqlSession sqlSession = null;
            try {
                sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH,false);
                Mapper mapper = sqlSession.getMapper(Mapper.class);
                Int batchCount = 1000; // Submit quantity, and submit as soon as it reaches that quantity
                for (int index = 0; index < list.size(); index++) {
                    Object obj = list.get(index);
                    mapper.updateInfo(obj);
                    if(index != 0 && index%batchCount == 0){
                        sqlSession.commit();
                    }                    
                }
                sqlSession.commit();
                return 0;
            }catch (Exception e){
                sqlSession.rollback();
                return -2;
            }finally {
                if(sqlSession != null){
                    sqlSession.close();
                }
            }
            
      }
    

2、mybatis参数分析：https://blog.csdn.net/isea533/article/details/44002219

3、jdbc关键对象Connection、Statement/PreparedStatement、ResultSet

4、mybatis插件可拦截的对象：Executor、ParameterHandler、ResultsetHandler、StatementHandler

5、设计模式：cache的装饰器模式，executor装饰器模式（cachingExecutor），代理模式（MapperProxyFactory，SqlSessionTemplate.sqlSessionProxy），建造者模式（），享元模式（Configuration）

6、SqlSessionFactoryBuilder-build-parse mybatis config-Configuration-SqlSessionFactory（DefaultSqlSessionFactory）-

7、mybatis-spring中的SqlSessionTemplate是线程安全的，它包含两个成员变量sqlSessionFactory（SqlSessionFactory）和sqlSessionProxy（SqlSession），表面上所有操作直接调用sqlSessionProxy，其实在每次执行crud的时候都是创建了一个sqlSession，sqlSessionProxy是SqlSession的一个代理实现类。sqlSessionProxy通过jdk动态代理的newInstance创建，其中InvocationHandler的具体实现是template的一个私有内部类SqlSessionInterceptor，它在invoke中通过sqlSessionFactory创建和关闭SqlSession

8、IUserDao userDao = session.getMapper(IUserDao.class)是通过DefaultSession创建了IUserDao的代理对象。mybatis加载配置文件之后，将指定的每个mapper接口包装成MapperProxyFactory保存起来，其中接口类型作为成员变量，通过实现了InvocationHandler的MapperProxy作为h，使用jdk动态代理创建mapper接口的代理对象Proxy.newInstance(classLoader, new class[]{mapper接口}, mapperProxy)。其中，